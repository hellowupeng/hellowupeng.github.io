<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hello, wupeng</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-15T12:49:46.320Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wu peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RCTActivityIndicatorView</title>
    <link href="http://yoursite.com/2017/10/15/2017-10/RCTActivityIndicatorView/"/>
    <id>http://yoursite.com/2017/10/15/2017-10/RCTActivityIndicatorView/</id>
    <published>2017-10-15T12:27:44.753Z</published>
    <updated>2017-10-15T12:49:46.320Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// RCTActivityIndicatorView.h</div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface RCTActivityIndicatorView: UIActivityIndicatorView</div><div class="line">@end</div><div class="line">  </div><div class="line">// RCTActivityIndicatorView.m</div><div class="line">#import &quot;RCTActivityIndicatorView.h&quot;</div><div class="line"></div><div class="line">@implementation RCTActivityIndicatorView &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setHidden:(BOOL)hidden</div><div class="line">&#123;</div><div class="line">    if ([self hidesWhenStopped] &amp;&amp; ![self isAnimating]) &#123;</div><div class="line">		[super setHidden: YES];</div><div class="line">    &#125; else &#123;</div><div class="line">        [super setHidden: hidden];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>AnyHashable.swift</title>
    <link href="http://yoursite.com/2017/10/10/2017-10/AnyHashable.swift/"/>
    <id>http://yoursite.com/2017/10/10/2017-10/AnyHashable.swift/</id>
    <published>2017-10-09T23:05:56.788Z</published>
    <updated>2017-10-15T12:49:59.734Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用 `AnyHashable` 有一个自定义表示的值。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// `Self` 也应该遵守 `Hashable`。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">_HasCustomAnyHashableRepresentation</span> </span>&#123;</div><div class="line">  <span class="comment">// 返回一个 `self` 作为 `AnyHashable` 的自定义表示。</span></div><div class="line">  <span class="comment">// 如果返回 nil，使用默认的表示。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 如果你的自定义表示是一个类的实例，它需要使用采用符合 `Hashable` 的静态类型来封装为 `AnyHashable`</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">//	class Base: Hashable &#123;&#125;</span></div><div class="line">  <span class="comment">//	class Derived1: Base &#123;&#125;</span></div><div class="line">  <span class="comment">//	class Derived2: Base, _HasCustomHashableRepresentation &#123;</span></div><div class="line">  <span class="comment">//		func _toCustomAnyHashable() -&gt; AnyHashable? &#123;</span></div><div class="line">  <span class="comment">//			// `Derived2` 标准的 `Derived1`</span></div><div class="line">  <span class="comment">//			let customRepresentation = Derived1()</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">//			// Wrong:</span></div><div class="line">  <span class="comment">//			// return AnyHashable(customRepresentaion)</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">//			// Correct:</span></div><div class="line">  <span class="comment">//			return AnyHashable(customRepresentation as Base)</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">_toCustomAnyHashable</span><span class="params">()</span></span> -&gt; <span class="type">AnyHashable</span>?</div><div class="line">&#125;</div><div class="line"></div><div class="line">@_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">protocol</span> <span class="title">_AnyHashableBox</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> _typeID: <span class="type">ObjectIdentifier</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">_unbox</span>&lt;T: Hashable&gt;<span class="params">()</span></span> -&gt; <span class="type">T</span>?</div><div class="line">  </div><div class="line">  <span class="comment">// 决定在箱子里的值是否相等。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// - 返回：`nil` 表示箱子存储不同的类型，所以不需要比较。否则，包含 `==` 的结果。</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">_isEqual</span><span class="params">(to: _AnyHashableBox)</span></span> -&gt; <span class="type">Bool</span>?</div><div class="line">  <span class="keyword">var</span> _hashValue: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> _base: <span class="type">Any</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">_downCastConditional</span>&lt;T&gt;<span class="params">(into result: UnsafeMutablePointer&lt;T&gt;)</span></span> -&gt; <span class="type">Bool</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">@_fixed_layout <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">@_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">struct</span> <span class="title">_ConcreteHashableBox</span>&lt;<span class="title">Base</span>: <span class="title">Hashable</span>&gt;: <span class="title">_AnyHashableBox</span> </span>&#123;</div><div class="line">  @_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _bashHashable: <span class="type">Base</span></div><div class="line">  </div><div class="line">  @_inlineable <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  @_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>) &#123;</div><div class="line">    <span class="keyword">self</span>._base = base</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  @_inlineable <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  @_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _typeID: <span class="type">ObjectIdentifier</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">ObjectIdentifier</span>(type(of: <span class="keyword">self</span>))</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  @_inlineable <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  @_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">_unbox</span>&lt;T: Hashable&gt;<span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">self</span> <span class="keyword">as</span> _AnyHashableBox <span class="keyword">as</span>? _ConcreteHashableBox&lt;<span class="type">T</span>&gt;)?._baseHashable</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  @_inlineable <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  @_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">_isEqual</span><span class="params">(to rhs: _AnyHashableBox)</span></span> -&gt; <span class="type">Bool</span>? &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> rhs: <span class="type">Base</span> = rhs._unbox() &#123;</div><div class="line">      <span class="keyword">return</span> _baseHashable == rhs</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  @_inlineable <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  @_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _hashValue: <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> _baseHashable.hashValue</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  @_inlineable <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  @_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Any</span> &#123;</div><div class="line">    <span class="keyword">return</span> _baseHashable</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  @_inlineable <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  @_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">  <span class="keyword">internal</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">_downCastConditional</span>&lt;T&gt;<span class="params">(into result: UnsafeMutablePointer&lt;T&gt;)</span></span> -&gt;<span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> value = _baseHashable <span class="keyword">as</span>? <span class="type">T</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    result.initialize(to: value)</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#<span class="keyword">if</span> _runtime(_ObjC)</div><div class="line"><span class="comment">// 在被桥接到 Objective-C 后，取回自定义任何可哈希的值的表示</span></div><div class="line">@_inlineable <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line">@_versioned <span class="comment">// FIXME(sil-serialize-all)</span></div><div class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">_getBridgedCustomAnyHashable</span>&lt;T&gt;<span class="params">(<span class="number">_</span> value: T)</span></span> -&gt; <span class="type">AnyHashable</span>? &#123;</div><div class="line">  <span class="keyword">let</span> bridgedValue = _bridgeAnythingToObjectiveC(value)</div><div class="line">  <span class="keyword">return</span> (bridgedValue <span class="keyword">as</span>? _HasCustomAnyHashableRepresentation)?._toCustomAnyHashable()</div><div class="line">&#125;</div><div class="line">#endif</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="Swift Standard Library" scheme="http://yoursite.com/categories/Swift-Standard-Library/"/>
    
    
      <category term="Swift Standard Library" scheme="http://yoursite.com/tags/Swift-Standard-Library/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm.swift</title>
    <link href="http://yoursite.com/2017/09/29/2017-09/Algorithm.swift/"/>
    <id>http://yoursite.com/2017/09/29/2017-09/Algorithm.swift/</id>
    <published>2017-09-28T23:44:00.641Z</published>
    <updated>2017-10-15T12:50:05.668Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回两个可比较的值得较小的</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// - 参数：</span></div><div class="line"><span class="comment">//	- x: 要比较的值</span></div><div class="line"><span class="comment">//	- y: 另一个要比较的值</span></div><div class="line"><span class="comment">// - 返回：`x` 和 `y` 中较小的一个。如果 `x` 等于 `y`，返</span></div><div class="line"><span class="comment">// 回 `x`。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 注：</span></div><div class="line"><span class="comment">// </span></div><div class="line">@_inlineable</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">min</span>&lt;T: Comparable&gt;<span class="params">(_x: T, <span class="number">_</span> y: T)</span></span> -&gt; <span class="type">T</span> &#123;</div><div class="line">  <span class="comment">// 如果 `x == y` 我们选择 `x`</span></div><div class="line">  <span class="comment">// 这维持如果 `T` 一致时所有之前存在的顺序，这对于排序</span></div><div class="line">  <span class="comment">// 算法的稳定很重要。例如: `(min(x, y), max(x, y))`</span></div><div class="line">  <span class="comment">// 在 `x == y` 时应该返回 `(x, y)`。</span></div><div class="line">   <span class="keyword">return</span> y &lt; <span class="type">X</span> ? y : x</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回传入的最小参数。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// - 参数：</span></div><div class="line"><span class="comment">//	- x: 要比较的参数。</span></div><div class="line"><span class="comment">//	- y: 另一个要比较的参数。</span></div><div class="line"><span class="comment">//	- z: 要比较的第三个参数。</span></div><div class="line"><span class="comment">//	- rest: 其他额外的值。</span></div><div class="line"><span class="comment">// - 返回值：所有参数中最小的。如果有多个相等的最小参数，结果是第一个。</span></div><div class="line">@_inlineable</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">min</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> x: T, <span class="number">_</span> z: T, <span class="number">_</span> rest: T...)</span></span> -&gt; <span class="type">T</span> &#123;</div><div class="line">  <span class="keyword">var</span> minValue = <span class="built_in">min</span>(<span class="built_in">min</span>(x, y), z)</div><div class="line">  <span class="comment">// 如果 `value == minValue`，我们选择 `minValue`。查看 min(_:_:)。</span></div><div class="line">  <span class="keyword">for</span> value <span class="keyword">in</span> rest <span class="keyword">where</span> value &lt; minValue &#123;</div><div class="line">      minValue = value</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> minValue</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回两个可比较值中最大的一个。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// - 参数：</span></div><div class="line"><span class="comment">//	- x: 要比较的值。</span></div><div class="line"><span class="comment">//	- y: 要比较的另一个值。</span></div><div class="line"><span class="comment">// - 返回：`x` 和 `y` 中最大的。如果 `x` 等于 `y`, 返回 `y`。</span></div><div class="line">@_inlineable</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">max</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> x: T, <span class="number">_</span> y: T)</span></span> -&gt; <span class="type">T</span> &#123;</div><div class="line">  <span class="comment">// 如果 `x == y`, 我们选择 `y`。 查看 min(_:_:)。</span></div><div class="line">  <span class="keyword">return</span> y &gt;= x ? y : x</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回传入的最大参数。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// - 参数：</span></div><div class="line"><span class="comment">//	- x: 要比较的值。</span></div><div class="line"><span class="comment">//	- y: 要比较的另一个值。</span></div><div class="line"><span class="comment">//	- z: 要比较的第三个值。</span></div><div class="line"><span class="comment">//	- rest: 额外的值。</span></div><div class="line"><span class="comment">// - 返回值：所有参数中最大的。如果有多个相等的最大参数。结果是最后一个。</span></div><div class="line">@_inlineable</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">max</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> x: T, <span class="number">_</span> y: T, <span class="number">_</span> z: T, <span class="number">_</span> rest: T...)</span></span> -&gt; <span class="type">T</span> &#123;</div><div class="line">  <span class="keyword">var</span> maxValue = <span class="built_in">max</span>(<span class="built_in">max</span>(x, y), z)</div><div class="line">  <span class="comment">// 如果 `value == maxValue`，我们选择 `value`。查看 min(_:_:)</span></div><div class="line">  <span class="keyword">for</span> value <span class="keyword">in</span> rest <span class="keyword">where</span> value &gt;= maxValue &#123;</div><div class="line">      maxValue = value</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> maxValue</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 用于 `EnumeratedSequence` 的遍历器。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 包裹基类遍历器的 `EnumeratedIterator` 和产生连续的 `Int` 值，从0开始，沿着底层基类遍历器的元素的</span></div><div class="line"><span class="comment">// 实例。以下示例枚举一个数组的元素：</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//	var iterator = ["foo", "bar"].enumerated().makeIterator()</span></div><div class="line"><span class="comment">//	iterator.next() // (0, "foo")</span></div><div class="line"><span class="comment">//	iterator.next() // (1, "bar")</span></div><div class="line"><span class="comment">//	iterator.next() // nil</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 要创建一个 `EnumeratedIterator` 的实例，在一个序列(sequence)或集合(collection)上</span></div><div class="line"><span class="comment">// 调用`enumerated().makeIterator()`。</span></div><div class="line">@_fixed_layout</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">EnumeratedIterator</span>&lt;<span class="title">Base</span>: <span class="title">IteratorProtocol</span>&gt;: <span class="title">IteratorProtocol</span>, <span class="title">Sequence</span> </span>&#123;</div><div class="line">  @_versioned</div><div class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _base: <span class="type">Base</span></div><div class="line">  @_versioned</div><div class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _count: <span class="type">Int</span></div><div class="line">  </div><div class="line">  <span class="comment">// 来自于 `Base` 迭代器的构造方法</span></div><div class="line">  @_inlineable</div><div class="line">  @_versioned</div><div class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(_base: <span class="type">Base</span>) &#123;</div><div class="line">	<span class="keyword">self</span>._base = _base</div><div class="line">    <span class="keyword">self</span>._count = <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 由 `next()` 返回的元素类型。</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Element</span> = (offset: <span class="type">Int</span>, element: <span class="type">Base</span>.<span class="type">Element</span>)</div><div class="line">  </div><div class="line">  <span class="comment">// 达到下一个元素并返回它，或者下一个元素不存在就返回 `nil`.</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 一旦 `nil` 被返回，随后的所有调用返回 `nil`.</span></div><div class="line">  @_inlineable</div><div class="line">  <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element</span>? &#123;</div><div class="line">	<span class="keyword">guard</span> <span class="keyword">let</span> b = _base.next() <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</div><div class="line">    <span class="keyword">let</span> result = (offset: _count, element: b)</div><div class="line">    _count += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 一个序列或集合元素的枚举。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// `EnumeratedSequence` 是一个序列对 (*n*, *x*), *n*s 是从0开始的连续的 `Int` 值，*x*s是基类序列</span></div><div class="line"><span class="comment">// 元素。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 要创建一个 `EnumeratedSequence` 的实例，在一个序列或集合上调用 `enumerated()`。以下示例</span></div><div class="line"><span class="comment">// 列举出一个数组的元素。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//	var s = ["foo", "bar"].enumerated()</span></div><div class="line"><span class="comment">//	for (n, x) in s &#123;</span></div><div class="line"><span class="comment">//		print("\(n): \(x)")</span></div><div class="line"><span class="comment">//	&#125;</span></div><div class="line"><span class="comment">//	// Prints "0: foo"</span></div><div class="line"><span class="comment">//	// Prints "1: bar"</span></div><div class="line">@_fixed_layout</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">EnumeratedSequence</span>&lt;<span class="title">Base</span>: <span class="title">Sequence</span>&gt;: <span class="title">Sequence</span> </span>&#123;</div><div class="line">  @_versioned</div><div class="line">  interval <span class="keyword">var</span> _base: <span class="type">Base</span></div><div class="line">  </div><div class="line">  <span class="comment">// 来自于 `Base` 序列的构造</span></div><div class="line">  @_inlineable</div><div class="line">  @_versioned</div><div class="line">  interval <span class="keyword">init</span>(_base: <span class="type">Base</span>) &#123;</div><div class="line">    <span class="keyword">self</span>._base = _base</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 返回一个越过这个序列的元素的迭代器。</span></div><div class="line">  @_inlineable</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">EnumeratedIterator</span>&lt;<span class="type">Base</span>.<span class="type">Iterator</span>&gt; &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">EnumeratedIterator</span>(_base: _base.makeIterator())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="Swift Standard Library" scheme="http://yoursite.com/categories/Swift-Standard-Library/"/>
    
    
      <category term="Swift Standard Library" scheme="http://yoursite.com/tags/Swift-Standard-Library/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/09/27/2017-09/LosslessStringConvertible/"/>
    <id>http://yoursite.com/2017/09/27/2017-09/LosslessStringConvertible/</id>
    <published>2017-09-26T23:54:45.769Z</published>
    <updated>2017-09-27T22:40:00.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LosslessStringConvertible"><a href="#LosslessStringConvertible" class="headerlink" title="LosslessStringConvertible"></a>LosslessStringConvertible</h1><h6 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h6><p>能用无损的，清晰的方式表示为字符串的类型。</p>
<h2 id="概览（Overview）"><a href="#概览（Overview）" class="headerlink" title="概览（Overview）"></a>概览（Overview）</h2><p>例如，整数值1050能用它的全部被表示为“1050”。</p>
<p>一个符合类型的 description 属性必须是原始值的值保护表示。同样的，他应该能从字符串表示重新创建一个实例。</p>
<h2 id="主题（Topics）"><a href="#主题（Topics）" class="headerlink" title="主题（Topics）"></a>主题（Topics）</h2><h3 id="初始化器（Initializers）"><a href="#初始化器（Initializers）" class="headerlink" title="初始化器（Initializers）"></a>初始化器（Initializers）</h3><h6 id="init-String"><a href="#init-String" class="headerlink" title="init?(String)"></a>init?(String)</h6><p>从字符串表示实例化一个遵循类型的实例。</p>
<h6 id="必要的"><a href="#必要的" class="headerlink" title="必要的"></a>必要的</h6><h2 id="关系（Relationships）"><a href="#关系（Relationships）" class="headerlink" title="关系（Relationships）"></a>关系（Relationships）</h2><h3 id="继承自（Inherit-From）"><a href="#继承自（Inherit-From）" class="headerlink" title="继承自（Inherit From）"></a>继承自（Inherit From）</h3><h6 id="CustomStringConvertible"><a href="#CustomStringConvertible" class="headerlink" title="CustomStringConvertible"></a>CustomStringConvertible</h6><h3 id="继承的类（Inherit-By）"><a href="#继承的类（Inherit-By）" class="headerlink" title="继承的类（Inherit By）"></a>继承的类（Inherit By）</h3><h6 id="FixedWidthInteger-StringProtocol"><a href="#FixedWidthInteger-StringProtocol" class="headerlink" title="FixedWidthInteger, StringProtocol"></a>FixedWidthInteger, StringProtocol</h6><h3 id="采用的类（Adopted-By）"><a href="#采用的类（Adopted-By）" class="headerlink" title="采用的类（Adopted By）"></a>采用的类（Adopted By）</h3><ul>
<li><h6 id="Bool"><a href="#Bool" class="headerlink" title="Bool"></a>Bool</h6></li>
<li><h6 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h6></li>
<li><h6 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h6></li>
<li><h6 id="Float80"><a href="#Float80" class="headerlink" title="Float80"></a>Float80</h6></li>
<li><h6 id="Substring"><a href="#Substring" class="headerlink" title="Substring"></a>Substring</h6></li>
<li><h6 id="Unicode-Scalar"><a href="#Unicode-Scalar" class="headerlink" title="Unicode.Scalar"></a>Unicode.Scalar</h6></li>
</ul>
<h2 id="另见（See-Also）"><a href="#另见（See-Also）" class="headerlink" title="另见（See Also）"></a>另见（See Also）</h2><h3 id="字符串表示（String-Representation）"><a href="#字符串表示（String-Representation）" class="headerlink" title="字符串表示（String Representation）"></a>字符串表示（String Representation）</h3><h6 id="protocol-CustomStringConvertible"><a href="#protocol-CustomStringConvertible" class="headerlink" title="protocol CustomStringConvertible"></a>protocol CustomStringConvertible</h6><p>一种可自定义的文本表示类型。</p>
<h6 id="protocol-CustomDebugStringConvertible"><a href="#protocol-CustomDebugStringConvertible" class="headerlink" title="protocol CustomDebugStringConvertible"></a>protocol CustomDebugStringConvertible</h6><p>一种适用于调试目的的可自定义的文本表示类型。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LosslessStringConvertible&quot;&gt;&lt;a href=&quot;#LosslessStringConvertible&quot; class=&quot;headerlink&quot; title=&quot;LosslessStringConvertible&quot;&gt;&lt;/a&gt;LosslessStr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/09/27/2017-09/CustomStringConvertible/"/>
    <id>http://yoursite.com/2017/09/27/2017-09/CustomStringConvertible/</id>
    <published>2017-09-26T22:27:05.441Z</published>
    <updated>2017-09-26T23:06:21.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CustomStringConvertible"><a href="#CustomStringConvertible" class="headerlink" title="CustomStringConvertible"></a>CustomStringConvertible</h1><h6 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h6><p>用自定义文本表示的类型。</p>
<h2 id="概览（Overview）"><a href="#概览（Overview）" class="headerlink" title="概览（Overview）"></a>概览（Overview）</h2><p>遵循 <code>CustomStringConvertible</code> 协议的类型当转变实例为字符串时，能提供他们自己的表示来使用。要转换任何类型的实例到字符串，<code>String(describing:)</code> 初始化器是较好的方式。如果传入的实例遵循 CustomStringConvertible，<code>String(describing:)</code> 初始化器和 <code>print(_:)</code> 函数使用实例的自定义 <code>description</code> 属性。</p>
<p>直接访问一个类型的 <code>description</code> 属性或使用 <code>CustomStringConvertible</code> 作为通用约束是被阻止的。 </p>
<h3 id="遵循-CustomStringConvertible-协议"><a href="#遵循-CustomStringConvertible-协议" class="headerlink" title="遵循 CustomStringConvertible 协议"></a>遵循 CustomStringConvertible 协议</h3><p>通过定义一个 <code>description</code> 属性添加遵循的 CustomStringConvertible 到你的自定义类型。</p>
<p>例如，这个自定义 Point 结构使用由标准库提供的默认表示。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> x: <span class="type">Int</span>, y: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> p = <span class="type">Point</span>(x: <span class="number">21</span>, y: <span class="number">30</span>)</div><div class="line"><span class="built_in">print</span>(p)</div><div class="line"><span class="comment">// Prints "Point(x: 21, y:30)"</span></div></pre></td></tr></table></figure>
<p>在实现 <code>description</code> 属性并声明遵循的 CustomStringConvertible 后，Point 类型提供它自己的自定义表示。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Point</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"(<span class="subst">\(x)</span>, <span class="subst">\(y)</span>)"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(p)</div><div class="line"><span class="comment">// Prints "(21, 30)"</span></div></pre></td></tr></table></figure>
<h2 id="主题（Topics）"><a href="#主题（Topics）" class="headerlink" title="主题（Topics）"></a>主题（Topics）</h2><h3 id="实例属性（Instance-Properties）"><a href="#实例属性（Instance-Properties）" class="headerlink" title="实例属性（Instance Properties）"></a>实例属性（Instance Properties）</h3><h6 id="var-description-String"><a href="#var-description-String" class="headerlink" title="var description: String"></a>var description: String</h6><p>实例的文本表示。</p>
<h5 id="必要的"><a href="#必要的" class="headerlink" title="必要的"></a>必要的</h5><h2 id="关系（Relationships）"><a href="#关系（Relationships）" class="headerlink" title="关系（Relationships）"></a>关系（Relationships）</h2><h3 id="继承的类（Inherit-By）"><a href="#继承的类（Inherit-By）" class="headerlink" title="继承的类（Inherit By）"></a>继承的类（Inherit By）</h3><h6 id="BinaryInteger-LosslessStringConvertible-ReferenceConvertible"><a href="#BinaryInteger-LosslessStringConvertible-ReferenceConvertible" class="headerlink" title="BinaryInteger, LosslessStringConvertible, ReferenceConvertible"></a>BinaryInteger, LosslessStringConvertible, ReferenceConvertible</h6><h3 id="采用的类（Adopted-By）"><a href="#采用的类（Adopted-By）" class="headerlink" title="采用的类（Adopted By）"></a>采用的类（Adopted By）</h3><h6 id="AffineTransform，IndexSet"><a href="#AffineTransform，IndexSet" class="headerlink" title="AffineTransform，IndexSet"></a>AffineTransform，IndexSet</h6><h6 id="AnyHashable，IndexSet-Index"><a href="#AnyHashable，IndexSet-Index" class="headerlink" title="AnyHashable，IndexSet.Index"></a>AnyHashable，IndexSet.Index</h6><h6 id="Array，Locale"><a href="#Array，Locale" class="headerlink" title="Array，Locale"></a>Array，Locale</h6><h6 id="ArraySlice，MeasureMent"><a href="#ArraySlice，MeasureMent" class="headerlink" title="ArraySlice，MeasureMent"></a>ArraySlice，MeasureMent</h6><h6 id="Bool，-Mirror"><a href="#Bool，-Mirror" class="headerlink" title="Bool， Mirror"></a>Bool， Mirror</h6><p>Calendar，NSObject</p>
<p>CGFloat，ObjcBool</p>
<p>Character，PersonNameComponent</p>
<p>CharacterSet，Range，</p>
<p>ClosedRange，Selector</p>
<p>ContiguousArray，Set</p>
<p>CountableClosedRange，StaticString</p>
<p>CountableRange，String</p>
<p>Data，String.Unicode</p>
<p>Date，ScalarView</p>
<p>DateComponents，String.UTF16View</p>
<p>DateInterval，String.UTF8View</p>
<p>Decimal，Substring</p>
<p>Dictionary，TimeZone</p>
<p>Double，Unicode.Scalar</p>
<p>Float，URL</p>
<p>Float80，URLComponents</p>
<p>ImplicitlyUnwrappedOptional，URLQueryItem</p>
<p>IndexPath，URLRequest，UUID</p>
<h2 id="另见（See-Also）"><a href="#另见（See-Also）" class="headerlink" title="另见（See Also）"></a>另见（See Also）</h2><h3 id="字符串表示（String-Representation）"><a href="#字符串表示（String-Representation）" class="headerlink" title="字符串表示（String Representation）"></a>字符串表示（String Representation）</h3><h6 id="protocol-LosslessStringConvertible"><a href="#protocol-LosslessStringConvertible" class="headerlink" title="protocol LosslessStringConvertible"></a>protocol LosslessStringConvertible</h6><p>能被用无损的，清晰地方式表示为字符串的类型。</p>
<h6 id="protocol-CustomDebugStringConvertible"><a href="#protocol-CustomDebugStringConvertible" class="headerlink" title="protocol CustomDebugStringConvertible"></a>protocol CustomDebugStringConvertible</h6><p>适用于调试目的自定义的文本表示的类型。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CustomStringConvertible&quot;&gt;&lt;a href=&quot;#CustomStringConvertible&quot; class=&quot;headerlink&quot; title=&quot;CustomStringConvertible&quot;&gt;&lt;/a&gt;CustomStringConve
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/09/27/2017-09/Swift-Standard-Library-Bool/"/>
    <id>http://yoursite.com/2017/09/27/2017-09/Swift-Standard-Library-Bool/</id>
    <published>2017-09-26T22:20:40.014Z</published>
    <updated>2017-09-28T23:26:30.968Z</updated>
    
    <content type="html"><![CDATA[<h3 id="布尔数据类型和支持的操作符。"><a href="#布尔数据类型和支持的操作符。" class="headerlink" title="布尔数据类型和支持的操作符。"></a>布尔数据类型和支持的操作符。</h3><p>实例是真或假的值类型</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line">@_fixed_layout <span class="comment">// This attributes are compiler-internal and not intended to be used by user code.</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Bool</span> </span>&#123;</div><div class="line">  @_versioned</div><div class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> _value: <span class="type">Builtin</span>.<span class="type">Int1</span> <span class="comment">// 内部变量 _value</span></div><div class="line"></div><div class="line">  <span class="comment">// 创建一个实例初始化为false</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 不要直接调用这个初始化器。相反，使用布尔字面量 `false` 来创建一个新的 `Bool` 实例。</span></div><div class="line">  @_transparent</div><div class="line">  <span class="keyword">public</span> <span class="keyword">init</span>() &#123;</div><div class="line">    <span class="keyword">let</span> zero: <span class="type">Int8</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">self</span>._value = <span class="type">Builtin</span>.trunc_Int8_Int1(zero._value)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @_versioned</div><div class="line">  @_transparent</div><div class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="number">_</span> v: <span class="type">Builtin</span>.<span class="type">Int1</span>) &#123; <span class="keyword">self</span>._value = v &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 创建一个等于给定布尔值的实例。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// - 参数值：要复制的布尔值。</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">Bool</span>) &#123;</div><div class="line">    <span class="keyword">self</span> = value</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bool</span> </span>&#123;</div><div class="line">  <span class="comment">// 这是一个编译器知道的魔法入口点。</span></div><div class="line">  @_transparent</div><div class="line">  <span class="keyword">public</span> <span class="comment">// 编译器内部的</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">_getBuiltinLogicalValue</span><span class="params">()</span></span> -&gt; <span class="type">Builtin</span>.<span class="type">Int1</span> &#123;</div><div class="line">    <span class="keyword">return</span> _value</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bool</span> : <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">  <span class="comment">// 布尔值的文本表示。</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span> ? <span class="string">"true"</span> : <span class="string">"false"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这是一个编译器知道的魔法入口点。</span></div><div class="line">@_transparent</div><div class="line"><span class="keyword">public</span> <span class="comment">// 编译器内部的</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">_getBool</span><span class="params">(<span class="number">_</span> v: Builtin.Int1)</span></span> -&gt; <span class="type">Bool</span> &#123; <span class="keyword">return</span> <span class="type">Bool</span>(v) &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bool</span>: <span class="title">Equatable</span>, <span class="title">Hashable</span> </span>&#123;</div><div class="line">  <span class="comment">// 布尔值的哈希值。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 两个相等的值总是有相等的哈希值。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 注意：哈希值在相同程序的不同调用之间不保证是稳定的。程序运行后不要存留哈希值。</span></div><div class="line">  @_transparent</div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> hashValue: <span class="type">Int</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">self</span> ? <span class="number">1</span> : <span class="number">0</span></div><div class="line">  &#125;	</div><div class="line">  </div><div class="line">  @_transparent</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs: Bool, rhs: Bool)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">Bool</span>(<span class="type">Builtin</span>.cmp_eq_Int1(lhs.value, rhs._value))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bool</span>: <span class="title">LosslessStringConvertible</span> </span>&#123;</div><div class="line">  <span class="comment">// 从给定的字符串创建一个新的布尔值</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 如果 `description` 值是除了 `"true"` 或 `"false"` 外的任何字符串，结果是   	// `nil`。这个初始化器是大小写敏感的。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 参数描述：布尔值的字符串表示。</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">init</span>?(<span class="number">_</span> description: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">if</span> description == <span class="string">"true"</span> &#123;</div><div class="line">      <span class="keyword">self</span> = <span class="literal">true</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> description == <span class="string">"false"</span> &#123;</div><div class="line">      <span class="keyword">self</span> == <span class="literal">false</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 操作符</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bool</span> </span>&#123;</div><div class="line">  <span class="comment">// 在一个布尔值上执行逻辑非操作</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 逻辑非(NOT)操作符(`!`)反转一个布尔值。如果值是 `true`，操作的结果是 `false`；如果值是 `false`，结果是 `true`。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// var printedMessage = false</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// if !printedMessage &#123;</span></div><div class="line">  <span class="comment">// 	print("You look nice today!")</span></div><div class="line">  <span class="comment">// 	printedMessage = true</span></div><div class="line">  <span class="comment">// &#125;</span></div><div class="line">  <span class="comment">// // Prints "You look nice today!"</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 参数 a: 要否定的布尔值。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 译注：prefix (or postfix): 当你声明操作符方法时，通过在  </span></div><div class="line">  <span class="comment">// `func` 关键字前面写 `prefix` 或 `postfix` 修饰符来实现一个</span></div><div class="line">  <span class="comment">// 前缀或后缀一元操作符。</span></div><div class="line">  @_transparent</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> ! <span class="params">(a: Bool)</span></span> -&gt; &#123;</div><div class="line">      <span class="keyword">return</span> <span class="type">Bool</span>(<span class="type">Builtin</span>.xor_Int1(a._value, <span class="literal">true</span>._vlaue))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bool</span> </span>&#123;</div><div class="line">  <span class="comment">// 在两个布尔值上执行逻辑与(AND)操作</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 逻辑与操作符(`&amp;&amp;`)联合两个布尔值，如果两个值都是 `true`，返回</span></div><div class="line">  <span class="comment">// `true`。如果任何一个值是 `false`，操作符返回 `false`。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 这个操作符使用短路评估：先评估左边 (`lhs`)，只是在 `lhs` 评估为</span></div><div class="line">  <span class="comment">// `true` 的时候右边 (`rhs`)才被评估。例如：</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">//	let measurements = [7.44, 6.51, 4.74, 5.88, 6.27,</span></div><div class="line">  <span class="comment">//	7.76]</span></div><div class="line">  <span class="comment">//	let sum = measurements.reduce(0, combine: +)</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">//	if measurements.count &gt; 0 &amp;&amp; sum / Double(measure</span></div><div class="line">  <span class="comment">//	-ments.count) &lt; 6.5 &#123;</span></div><div class="line">  <span class="comment">//		print("Average measurement is less than 6.5")</span></div><div class="line">  <span class="comment">//	&#125;</span></div><div class="line">  <span class="comment">//	// Prints "Average measurement is less than 6.5"</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 在这个例子里，`lhs` 测试 `measurements.count` 是否大于0</span></div><div class="line">  <span class="comment">// `&amp;&amp;` 操作符的评估是以下之一：</span></div><div class="line">  <span class="comment">// </span></div><div class="line">  <span class="comment">// - 当 `measurements.count` 等于0时，`lhs` 评估为 `false`，</span></div><div class="line">  <span class="comment">// `rhs` 不被评估，防止在表达式 `sum / Double(measure</span></div><div class="line">  <span class="comment">// -ments.count)` 里出现被0除的错误。操作的结果为 `false`。</span></div><div class="line">  <span class="comment">// - 当 `measurements.count` 大于0时，`lhs` 评估为 `true`，</span></div><div class="line">  <span class="comment">// `rhs` 被评估。评估 `rhs` 的结果是 `&amp;&amp;` 操作的结果。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// - 参数：</span></div><div class="line">  <span class="comment">//	- lhs: 操作的左边部分</span></div><div class="line">  <span class="comment">//	- rhs: 操作的右边部分</span></div><div class="line">  <span class="comment">// 译注：@autoclosure - 在表达式周围自动创建一个闭包</span></div><div class="line">  @_transparent</div><div class="line">  @inline(__always)</div><div class="line">  <span class="keyword">public</span> staic <span class="function"><span class="keyword">func</span> &amp;&amp; <span class="params">(lhs: Bool, rhs: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">      <span class="keyword">return</span> lhs ? <span class="keyword">try</span> rhs() : <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 在两个布尔值上执行逻辑或操作。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 逻辑或操作符 `||` 联合两个布尔值，如果其中一个值是 `true`，返回 </span></div><div class="line">  <span class="comment">// `true`。如果两个值都是 `false`，操作符返回 `false`。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 这个操作符使用短路评估：左手边 (`lhs`) 先被评估，右手边</span></div><div class="line">  <span class="comment">// (`rhs`) 只有在 `lhs` 评估为 `false` 时才会被评估。例如：</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">//	let majorErrors: Set = ["No first name", "</span></div><div class="line">  <span class="comment">//	name", ...]</span></div><div class="line">  <span class="comment">//	let error = ""</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">//	if error.isEmpty || !majorErrors.contains(error) &#123;</span></div><div class="line">  <span class="comment">//		print("No major errors detected")</span></div><div class="line">  <span class="comment">//	&#125; else &#123;</span></div><div class="line">  <span class="comment">// 		print("Major error: \(error)")</span></div><div class="line">  <span class="comment">//	&#125;</span></div><div class="line">  <span class="comment">//	// Prints "No major errors detected"</span></div><div class="line">  <span class="comment">// 在这个例子里，`lhs` 测试 `error` 是否是一个空字符串。</span></div><div class="line">  <span class="comment">// `||` 操作符的评估是以下之一：</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// - 当 `error` 是一个空字符串时，`lhs` 评估为 `true`，`rhs` 不</span></div><div class="line">  <span class="comment">// 评估，跳过调用 `majorErrors.contains(_:)`。操作的结果是</span></div><div class="line">  <span class="comment">// `true`。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// - 当 `error` 不是空字符串时，`lhs` 评估为 `false`，`rhs` 被</span></div><div class="line">  <span class="comment">// 评估。评估 `rhs` 的结果是 `||` 操作的结果。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// - 参数：</span></div><div class="line">  <span class="comment">//	- lhs: 操作的左边部分。</span></div><div class="line">  <span class="comment">//	- rhs: 操作的右边部分。</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// 注：</span></div><div class="line">  <span class="comment">// @_transparent: 编译器内部的</span></div><div class="line">  <span class="comment">// @inline(_always): 声明函数总是编译成 inline 的形式。</span></div><div class="line">  <span class="comment">// @inline(never): 声明函数从不编译成 inline 的形式。</span></div><div class="line">  @_transparent</div><div class="line">  @inline(_always)</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> || <span class="params">(lhs: Bool, rhs: @autoclosure <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">      <span class="keyword">return</span> lhs ? <span class="literal">true</span> : <span class="keyword">try</span> rhs()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;布尔数据类型和支持的操作符。&quot;&gt;&lt;a href=&quot;#布尔数据类型和支持的操作符。&quot; class=&quot;headerlink&quot; title=&quot;布尔数据类型和支持的操作符。&quot;&gt;&lt;/a&gt;布尔数据类型和支持的操作符。&lt;/h3&gt;&lt;p&gt;实例是真或假的值类型&lt;/p&gt;
&lt;figure
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bool（布尔型）</title>
    <link href="http://yoursite.com/2017/09/25/2017-09/Bool/"/>
    <id>http://yoursite.com/2017/09/25/2017-09/Bool/</id>
    <published>2017-09-24T23:59:49.127Z</published>
    <updated>2017-09-25T23:06:15.486Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h6><p>实例是真或假的值类型。</p>
<h2 id="概览（Overview）"><a href="#概览（Overview）" class="headerlink" title="概览（Overview）"></a>概览（Overview）</h2><p>在 Swift 里 Bool 代表布尔值。通过使用布尔值真（true）或假（false）中的一个，或者通过赋值布尔方法或操作的结果到变量或常量来创建 Bool 实例。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> godotHasArrived = <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> numbers = <span class="number">1</span>...<span class="number">5</span></div><div class="line"><span class="keyword">let</span> containsTen = numbers.<span class="built_in">contains</span>(<span class="number">10</span>)</div><div class="line"><span class="built_in">print</span>(containsTen)</div><div class="line"><span class="comment">// Prints "false"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> (a, b) = (<span class="number">100</span>, <span class="number">101</span>)</div><div class="line"><span class="keyword">let</span> aFirst = a &lt; b</div><div class="line"><span class="built_in">print</span>(aFirst)</div><div class="line"><span class="comment">// Prints "true"</span></div></pre></td></tr></table></figure>
<p>在条件比较的环境里 Swift 只是用简单的布尔值帮助避免意外的编程错误和帮助维持每个控制语句的清晰。不像在其他编程语言里一样，在 Swift 里，整型和字符串不能被使用在要求是布尔值的地方。</p>
<p>例如，以下代码示例不会编译，因为他尝试在逻辑环境下使用整型 <code>i</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">5</span></div><div class="line"><span class="keyword">while</span> i &#123;</div><div class="line">  <span class="built_in">print</span>(i)</div><div class="line">  i -= <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Swift 里正确的方法是在 while 语句中比较 i 和 0。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> i != <span class="number">0</span> &#123;</div><div class="line">  <span class="built_in">print</span>(i)</div><div class="line">  i -= <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用导入的布尔值（Using-Imported-Boolean-values）"><a href="#使用导入的布尔值（Using-Imported-Boolean-values）" class="headerlink" title="使用导入的布尔值（Using Imported Boolean values）"></a>使用导入的布尔值（Using Imported Boolean values）</h3><p>C bool 和 Boolean 类型和 Objective-C BOOL 类型都被桥接到 Swift 里作为 Bool。在 Swift 里单一的 Bool 类型保证了从 C 和 Objective-C 里导入的函数（functions），方法（methods）和属性（properties）有一个一致的类型接口。</p>
<h2 id="主题（Topics）"><a href="#主题（Topics）" class="headerlink" title="主题（Topics）"></a>主题（Topics）</h2><h3 id="比较布尔值（Comparing-Boolean-Values）"><a href="#比较布尔值（Comparing-Boolean-Values）" class="headerlink" title="比较布尔值（Comparing Boolean Values）"></a>比较布尔值（Comparing Boolean Values）</h3><p><code>static func ==(Bool)</code></p>
<p><code>static func !=(Bool, Bool)</code></p>
<p>返回表示两个值是否不相等的布尔值。‘</p>
<h3 id="转换一个布尔值（Transforming-a-Boolean）"><a href="#转换一个布尔值（Transforming-a-Boolean）" class="headerlink" title="转换一个布尔值（Transforming a Boolean）"></a>转换一个布尔值（Transforming a Boolean）</h3><p><code>static func !(Bool)</code></p>
<p>在一个布尔值上执行逻辑非操作。</p>
<p><code>static func ||(Bool, () -&gt; Bool)</code></p>
<p>在两个布尔值上执行逻辑或操作。</p>
<p><code>static func &amp;&amp;(Bool, () -&gt; Bool)</code></p>
<p>在两个布尔值上执行逻辑与操作。</p>
<h3 id="描述一个布尔值（Describing-a-Boolean）"><a href="#描述一个布尔值（Describing-a-Boolean）" class="headerlink" title="描述一个布尔值（Describing a Boolean）"></a>描述一个布尔值（Describing a Boolean）</h3><p><a href="https://developer.apple.com/documentation/swift/bool/1538894-description" target="_blank" rel="external"><code>var</code> description<code>: String</code></a></p>
<p>布尔值的文本表示。</p>
<h3 id="检查布尔值（Inspecting-a-Boolean）"><a href="#检查布尔值（Inspecting-a-Boolean）" class="headerlink" title="检查布尔值（Inspecting a Boolean）"></a>检查布尔值（Inspecting a Boolean）</h3><p><a href="https://developer.apple.com/documentation/swift/bool/1641275-custommirror" target="_blank" rel="external"><code>var</code> customMirror<code>: Mirror</code></a></p>
<p>反射布尔值的一个镜像。</p>
<p><a href="https://developer.apple.com/documentation/swift/bool/1641275-custommirror" target="_blank" rel="external"><code>var</code> customPlaygroundQuickLook<code>: PlaygroundQuickLook</code></a></p>
<p><a href="https://developer.apple.com/documentation/swift/bool/1540169-hashvalue" target="_blank" rel="external"><code>var</code> hashValue<code>: Int</code></a></p>
<p>布尔值哈希值。</p>
<h3 id="从另一个值创建布尔值（Creating-a-Boolean-From-Another-Value）"><a href="#从另一个值创建布尔值（Creating-a-Boolean-From-Another-Value）" class="headerlink" title="从另一个值创建布尔值（Creating a Boolean From Another Value）"></a>从另一个值创建布尔值（Creating a Boolean From Another Value）</h3><p><a href="https://developer.apple.com/documentation/swift/bool/1540923-init" target="_blank" rel="external">init<code>(Bool)</code></a></p>
<p>创建一个等于给定布尔值的实例。</p>
<p><a href="https://developer.apple.com/documentation/swift/bool/2428231-init" target="_blank" rel="external">init<code>?(String)</code></a></p>
<p>从给定字符串创建一个新的布尔值。</p>
<p><a href="https://developer.apple.com/documentation/swift/bool/2895323-init" target="_blank" rel="external">init(truncating: <code>NSNumber</code>)</a></p>
<p><a href="https://developer.apple.com/documentation/swift/bool/2895341-init" target="_blank" rel="external">init?(exactly: <code>NSNumber</code>)</a></p>
<h3 id="编码和解码（Encoding-and-Decodiing）"><a href="#编码和解码（Encoding-and-Decodiing）" class="headerlink" title="编码和解码（Encoding and Decodiing）"></a>编码和解码（Encoding and Decodiing）</h3><p><a href="https://developer.apple.com/documentation/swift/bool/2894515-init" target="_blank" rel="external">init(from: <code>Decoder</code>)</a></p>
<p><a href="https://developer.apple.com/documentation/swift/bool/2894902-encode" target="_blank" rel="external"><code>func</code> encode(to: <code>Encoder</code>)</a></p>
<h3 id="极少使用的初始化器（Infrequently-Used-Initializers）"><a href="#极少使用的初始化器（Infrequently-Used-Initializers）" class="headerlink" title="极少使用的初始化器（Infrequently Used Initializers）"></a>极少使用的初始化器（Infrequently Used Initializers）</h3><p><a href="https://developer.apple.com/documentation/swift/bool/1539399-init" target="_blank" rel="external">init()</a></p>
<p>创建一个初始化为假的实例。</p>
<p><a href="https://developer.apple.com/documentation/swift/bool/1540965-init" target="_blank" rel="external">init(booleanLiteral: <code>Bool</code>)</a></p>
<p>创建一个初始化为指定布尔值字面量的实例。</p>
<h2 id="关系（Relationships）"><a href="#关系（Relationships）" class="headerlink" title="关系（Relationships）"></a>关系（Relationships）</h2><h3 id="遵循（协议）（Conforms-To）"><a href="#遵循（协议）（Conforms-To）" class="headerlink" title="遵循（协议）（Conforms To）"></a>遵循（协议）（Conforms To）</h3><ul>
<li><a href="https://developer.apple.com/documentation/swift/customplaygroundquicklookable" target="_blank" rel="external">CustomPlaygroundQuickLookable</a></li>
<li><a href="https://developer.apple.com/documentation/swift/customreflectable" target="_blank" rel="external">CustomReflectable</a></li>
<li><a href="https://developer.apple.com/documentation/swift/customstringconvertible" target="_blank" rel="external">CustomStringConvertible</a></li>
<li><a href="https://developer.apple.com/documentation/swift/equatable" target="_blank" rel="external">Equatable</a></li>
<li><a href="https://developer.apple.com/documentation/swift/expressiblebybooleanliteral" target="_blank" rel="external">ExpressibleByBooleanLiteral</a></li>
<li><a href="https://developer.apple.com/documentation/swift/hashable" target="_blank" rel="external">Hashable</a></li>
<li><a href="https://developer.apple.com/documentation/swift/losslessstringconvertible" target="_blank" rel="external">LosslessStringConvertible</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;Structure&quot;&gt;&lt;a href=&quot;#Structure&quot; class=&quot;headerlink&quot; title=&quot;Structure&quot;&gt;&lt;/a&gt;Structure&lt;/h6&gt;&lt;p&gt;实例是真或假的值类型。&lt;/p&gt;
&lt;h2 id=&quot;概览（Overview）&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Apple文档" scheme="http://yoursite.com/categories/Apple%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Numbers and Basic Values" scheme="http://yoursite.com/tags/Numbers-and-Basic-Values/"/>
    
  </entry>
  
  <entry>
    <title>Numbers and Basic Values（数值和基本值）</title>
    <link href="http://yoursite.com/2017/09/24/2017-09/Numbers-and-Basic-Values%EF%BC%89/"/>
    <id>http://yoursite.com/2017/09/24/2017-09/Numbers-and-Basic-Values）/</id>
    <published>2017-09-24T14:07:54.000Z</published>
    <updated>2017-09-25T23:11:26.553Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/documentation/swift/numbers_and_basic_values" target="_blank" rel="external">原文地址</a></p>
<p>用数值，布尔值和其他基础类型模型化数据。</p>
<h2 id="主题（Topics）"><a href="#主题（Topics）" class="headerlink" title="主题（Topics）"></a>主题（Topics）</h2><h3 id="逻辑值（Logical-Values）"><a href="#逻辑值（Logical-Values）" class="headerlink" title="逻辑值（Logical Values）"></a>逻辑值（Logical Values）</h3><p><code>struct</code> <a href="/2017/09/25/2017-09/Bool/">Bool</a></p>
<p>实例是真（true）或假（false）的值类型。</p>
<h3 id="数值（Numeric-Values）"><a href="#数值（Numeric-Values）" class="headerlink" title="数值（Numeric Values）"></a>数值（Numeric Values）</h3><p><code>struct</code> <a href="https://developer.apple.com/documentation/swift/int" target="_blank" rel="external">Int</a></p>
<p>有符号整数类型。</p>
<p><code>struct</code> <a href="https://developer.apple.com/documentation/swift/double" target="_blank" rel="external">Double</a></p>
<p>双精度，浮点值类型。</p>
<p><code>struct</code> <a href="https://developer.apple.com/documentation/swift/float" target="_blank" rel="external">Float</a></p>
<p>单精度，浮点值类型。</p>
<h3 id="范围（Ranges）"><a href="#范围（Ranges）" class="headerlink" title="范围（Ranges）"></a>范围（Ranges）</h3><p><code>struct</code> <a href="https://developer.apple.com/documentation/swift/range" target="_blank" rel="external">Range</a></p>
<p>在一种可比较类型之上的半开区间，从下界到上界，但是不包括下界。</p>
<p><code>struct</code> <a href="https://developer.apple.com/documentation/swift/closedrange" target="_blank" rel="external">ClosedRange</a></p>
<p>在一种可比较类型之上的闭区间，从下界到上界，包括下界。</p>
<h3 id="错误（Errors）"><a href="#错误（Errors）" class="headerlink" title="错误（Errors）"></a>错误（Errors）</h3><p><code>protocol</code> <a href="https://developer.apple.com/documentation/swift/error" target="_blank" rel="external">Error</a></p>
<p>代表一种能被抛出的错误值。</p>
<h3 id="可选型（Optionals）"><a href="#可选型（Optionals）" class="headerlink" title="可选型（Optionals）"></a>可选型（Optionals）</h3><p><code>enum</code> <a href="https://developer.apple.com/documentation/swift/optional" target="_blank" rel="external">Optional</a></p>
<p>代表是一种包裹的值（wrapped）或空（nil）—值的缺失的类型。</p>
<h3 id="高级数值（Advanced-Numerics）"><a href="#高级数值（Advanced-Numerics）" class="headerlink" title="高级数值（Advanced Numerics）"></a>高级数值（Advanced Numerics）</h3><h5 id="数值协议（Numeric-Protocols）"><a href="#数值协议（Numeric-Protocols）" class="headerlink" title="数值协议（Numeric Protocols）"></a><a href="https://developer.apple.com/documentation/swift/numbers_and_basic_values/numeric_protocols" target="_blank" rel="external">数值协议（Numeric Protocols）</a></h5><p>写和任何数值类型工作的通用代码。</p>
<h5 id="特殊使用的数值类型（Special-Use-Numeric-Types）"><a href="#特殊使用的数值类型（Special-Use-Numeric-Types）" class="headerlink" title="特殊使用的数值类型（Special-Use Numeric Types）"></a><a href="https://developer.apple.com/documentation/swift/numbers_and_basic_values/special_use_numeric_types" target="_blank" rel="external">特殊使用的数值类型（Special-Use Numeric Types）</a></h5><p>和不同尺寸的固定宽度数值类型工作。</p>
<h5 id="全局数值函数（Global-Numeric-Function）"><a href="#全局数值函数（Global-Numeric-Function）" class="headerlink" title="全局数值函数（Global Numeric Function）"></a><a href="https://developer.apple.com/documentation/swift/numbers_and_basic_values/global_numeric_functions" target="_blank" rel="external">全局数值函数（Global Numeric Function）</a></h5><p>与数值和其他可比较类型使用这些函数。</p>
<h2 id="另见（See-Also）"><a href="#另见（See-Also）" class="headerlink" title="另见（See Also）"></a>另见（See Also）</h2><h3 id="值和集合（Values-and-Collections）"><a href="#值和集合（Values-and-Collections）" class="headerlink" title="值和集合（Values and Collections）"></a>值和集合（Values and Collections）</h3><h5 id="字符串和文本（Strings-and-Text）"><a href="#字符串和文本（Strings-and-Text）" class="headerlink" title="字符串和文本（Strings and Text）"></a><a href="https://developer.apple.com/documentation/swift/strings_and_text" target="_blank" rel="external">字符串和文本（Strings and Text）</a></h5><p>和使用 Unicode-safe 的字符串的文本工作。</p>
<h5 id="集合（Collections）"><a href="#集合（Collections）" class="headerlink" title="集合（Collections）"></a><a href="https://developer.apple.com/documentation/swift/collections" target="_blank" rel="external">集合（Collections）</a></h5><p>使用数组，字典，集合和其他数据结构存储和组织数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/swift/numbers_and_basic_values&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用数值，布尔值
    
    </summary>
    
      <category term="Apple文档" scheme="http://yoursite.com/categories/Apple%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="swift standard library" scheme="http://yoursite.com/tags/swift-standard-library/"/>
    
  </entry>
  
  <entry>
    <title>Swift Standard Library（Swift 标准库）</title>
    <link href="http://yoursite.com/2017/09/24/2017-09/Swift-Standard-Library/"/>
    <id>http://yoursite.com/2017/09/24/2017-09/Swift-Standard-Library/</id>
    <published>2017-09-24T07:39:30.790Z</published>
    <updated>2017-09-24T23:35:06.885Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/documentation/swift" target="_blank" rel="external">原文地址</a></p>
<p>解决复杂问题和写高性能，易读的代码。</p>
<h2 id="概览（Overview）"><a href="#概览（Overview）" class="headerlink" title="概览（Overview）"></a>概览（Overview）</h2><p>Swift 标准库为写 Swift 程序定义了内层功能，包括：</p>
<ul>
<li>基本数据类型，例如 Int，Double 和 String</li>
<li>常见数据结构，例如数组（Array），字典（Dictionary），和集合（Set）</li>
<li>全局函数，例如 <code>print(_:separator:teminator:)</code> 和 <code>abs(_:)</code></li>
<li>描述常见抽象的协议，例如 Collection 和 Equatable</li>
</ul>
<blockquote>
<h6 id="体验标准库"><a href="#体验标准库" class="headerlink" title="体验标准库"></a>体验标准库</h6><p>体验 Swift 标准库类型和使用可视化和实际的例子学习高级概念。学习 Swift 标准库如何使用协议（protocol）和泛型（generics）表达强大的约束。下载下面的 playground 来开始。</p>
<p><a href="https://developer.apple.com/sample-code/swift/downloads/standard-library.zip" target="_blank" rel="external">Swift Standard Library.plyground</a></p>
</blockquote>
<h2 id="主题（Topics）"><a href="#主题（Topics）" class="headerlink" title="主题（Topics）"></a>主题（Topics）</h2><h3 id="值和集合（Values-and-Collections）"><a href="#值和集合（Values-and-Collections）" class="headerlink" title="值和集合（Values and Collections）"></a>值和集合（Values and Collections）</h3><h5 id="数值和基础值（Numbers-and-Basic-Values）"><a href="#数值和基础值（Numbers-and-Basic-Values）" class="headerlink" title="数值和基础值（Numbers and Basic Values）"></a><a href="/2017/09/24/2017-09/Numbers-and-Basic-Values）/">数值和基础值（Numbers and Basic Values）</a></h5><p>用数值，布尔值和其他基础类型模型数据。</p>
<h5 id="字符串和文本（Strings-and-Text）"><a href="#字符串和文本（Strings-and-Text）" class="headerlink" title="字符串和文本（Strings and Text）"></a><a href="https://developer.apple.com/documentation/swift/strings_and_text" target="_blank" rel="external">字符串和文本（Strings and Text）</a></h5><p>使用 Unicode-safe 字符串文本工作。</p>
<h5 id="集合（Collections）"><a href="#集合（Collections）" class="headerlink" title="集合（Collections）"></a><a href="https://developer.apple.com/documentation/swift/collections" target="_blank" rel="external">集合（Collections）</a></h5><p>使用数组，字典，集合和其他数据结构存储和组织数据。</p>
<h3 id="用于你的类型的工具（Tools-for-your-Types）"><a href="#用于你的类型的工具（Tools-for-your-Types）" class="headerlink" title="用于你的类型的工具（Tools for your Types）"></a>用于你的类型的工具（Tools for your Types）</h3><h5 id="基本行为（Basic-Behaviors）"><a href="#基本行为（Basic-Behaviors）" class="headerlink" title="基本行为（Basic Behaviors）"></a><a href="https://developer.apple.com/documentation/swift/basic_behaviors" target="_blank" rel="external">基本行为（Basic Behaviors）</a></h5><p>取决于相等性或顺序的测试和作为集合和字典的成员来在工作中使用你的自定义类型。</p>
<h5 id="编码，解码和序列化（Encoding，Decoding，and-Serialization）"><a href="#编码，解码和序列化（Encoding，Decoding，and-Serialization）" class="headerlink" title="编码，解码和序列化（Encoding，Decoding，and Serialization）"></a><a href="https://developer.apple.com/documentation/swift/encoding_decoding_and_serialization" target="_blank" rel="external">编码，解码和序列化（Encoding，Decoding，and Serialization）</a></h5><p>用隐式或自定义编码序列化和反序列化你的类型的实例。</p>
<h5 id="用字面量初始化（Initialization-with-Literals）"><a href="#用字面量初始化（Initialization-with-Literals）" class="headerlink" title="用字面量初始化（Initialization with Literals）"></a><a href="https://developer.apple.com/documentation/swift/initialization_with_literals" target="_blank" rel="external">用字面量初始化（Initialization with Literals）</a></h5><p>使用不懂种类的字面量允许你的类型的值被表达。</p>
<h3 id="编程任务（Programming-Tasks）"><a href="#编程任务（Programming-Tasks）" class="headerlink" title="编程任务（Programming Tasks）"></a>编程任务（Programming Tasks）</h3><h5 id="输入和输出（Input-and-Output）"><a href="#输入和输出（Input-and-Output）" class="headerlink" title="输入和输出（Input and Output）"></a><a href="https://developer.apple.com/documentation/swift/input_and_output" target="_blank" rel="external">输入和输出（Input and Output）</a></h5><p>打印到控制台，从文本流读取和写入到文本流，以及使用命令行参数。</p>
<h5 id="调试和反射（Debugging-and-Reflection）"><a href="#调试和反射（Debugging-and-Reflection）" class="headerlink" title="调试和反射（Debugging and Reflection）"></a><a href="https://developer.apple.com/documentation/swift/debugging_and_reflection" target="_blank" rel="external">调试和反射（Debugging and Reflection）</a></h5><p>使用运行时检查增强你的代码并检查你的值得运行时描述。</p>
<h5 id="关键路径表达式（Key-Path-Expressions）"><a href="#关键路径表达式（Key-Path-Expressions）" class="headerlink" title="关键路径表达式（Key-Path Expressions）"></a><a href="https://developer.apple.com/documentation/swift/key_path_expressions" target="_blank" rel="external">关键路径表达式（Key-Path Expressions）</a></h5><p>使用关键路径表达式动态地访问属性。</p>
<h5 id="手动内存管理（Manual-Memory-Management）"><a href="#手动内存管理（Manual-Memory-Management）" class="headerlink" title="手动内存管理（Manual Memory Management）"></a><a href="https://developer.apple.com/documentation/swift/manual_memory_management" target="_blank" rel="external">手动内存管理（Manual Memory Management）</a></h5><p>手动分配和管理内存。</p>
<h5 id="类型转换和存在类型（Type-Casting-and-Existential-Types）"><a href="#类型转换和存在类型（Type-Casting-and-Existential-Types）" class="headerlink" title="类型转换和存在类型（Type Casting and Existential Types）"></a><a href="https://developer.apple.com/documentation/swift/type_casting_and_existential_types" target="_blank" rel="external">类型转换和存在类型（Type Casting and Existential Types）</a></h5><p>在类型或任何类型的代表值之间执行转换。</p>
<h5 id="C-互操作性（C-Interoperability）"><a href="#C-互操作性（C-Interoperability）" class="headerlink" title="C 互操作性（C Interoperability）"></a><a href="https://developer.apple.com/documentation/swift/c_interoperability" target="_blank" rel="external">C 互操作性（C Interoperability）</a></h5><p>使用导入的 C 类型或调用 C 的可变（variadic）函数。</p>
<h5 id="操作符声明（Operator-Declarations）"><a href="#操作符声明（Operator-Declarations）" class="headerlink" title="操作符声明（Operator Declarations）"></a><a href="https://developer.apple.com/documentation/swift/operator_declarations" target="_blank" rel="external">操作符声明（Operator Declarations）</a></h5><p>使用前缀，后缀和中缀操作符。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解决复杂问题和写高性能，易读的代码。&lt;/p&gt;
&lt;h2 id=&quot;概
    
    </summary>
    
      <category term="Apple文档" scheme="http://yoursite.com/categories/Apple%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="apple docs" scheme="http://yoursite.com/tags/apple-docs/"/>
    
  </entry>
  
  <entry>
    <title>Core App（核心应用）</title>
    <link href="http://yoursite.com/2017/09/24/2017-09/Core-App/"/>
    <id>http://yoursite.com/2017/09/24/2017-09/Core-App/</id>
    <published>2017-09-24T05:55:51.300Z</published>
    <updated>2017-09-24T23:28:36.898Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/documentation/uikit/core_app" target="_blank" rel="external">原文地址</a></p>
<p>管理你的应用的数据模型和它与系统的交互。</p>
<h2 id="主题（Topics）"><a href="#主题（Topics）" class="headerlink" title="主题（Topics）"></a>主题（Topics）</h2><h3 id="应用（Application）"><a href="#应用（Application）" class="headerlink" title="应用（Application）"></a>应用（Application）</h3><h5 id="保护用户隐私"><a href="#保护用户隐私" class="headerlink" title="保护用户隐私"></a><a href="">保护用户隐私</a></h5><p>通过加密个人数据和尊重用户如何使用数据的意愿保护用户隐私</p>
<p><code>class</code> <a href="">UIApplication</a></p>
<p>运行在iOS上的应用的控制和协调的集中点。</p>
<p><code>protocol</code> <a href="">UIApplicationDelegate</a></p>
<p>由单例 <code>UIApplication</code> 对象调用的方法集合，响应在你的应用的生命周期里的重要事件。</p>
<p><code>func</code> <a href="">UIApplicationMain</a>( Int32, UnsafeMutablePointer<unsafemutablepointer<int8>&gt;!, String?, String?)</unsafemutablepointer<int8></p>
<p>创建应用对象和应用代理并设置事件循环（event cycle）。</p>
<h3 id="设备环境（Device-Environment）"><a href="#设备环境（Device-Environment）" class="headerlink" title="设备环境（Device Environment）"></a>设备环境（Device Environment）</h3><h5 id="响应在-Apple-TV-上改变显示模式"><a href="#响应在-Apple-TV-上改变显示模式" class="headerlink" title="响应在 Apple TV 上改变显示模式"></a><a href="">响应在 Apple TV 上改变显示模式</a></h5><p>当在你设备上的整个屏幕改变时动态地改变图片和资源。</p>
<p><code>class</code> <a href="">UIDevice</a></p>
<p>当前设备的描述。</p>
<p><code>class</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UITraitCollection</a></p>
<p>由 trait 定义，用于你的应用的 iOS 界面环境，例如水平和垂直尺寸类（size class），显示缩放和用户界面语言。</p>
<p><code>protocol</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UITraitEnvironment</a></p>
<p>使 iOS 界面环境可用于你的应用的方法集合。</p>
<p><code>protocol</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UIAdaptivePresentationControllerDelegate</a></p>
<p>连同呈现控制器（presentation controller），决定如何响应你的应用里的特征改变的方法集合。</p>
<h3 id="文档（Documents）"><a href="#文档（Documents）" class="headerlink" title="文档（Documents）"></a>文档（Documents）</h3><p><code>class</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UIDocument</a></p>
<p>用于管理你的应用的数据的分离部分的抽象基类。</p>
<p><code>class</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UIManagedDocument</a></p>
<p>与 Core Data 整合的托管的文档对象。</p>
<h3 id="粘贴板（Pasteboard）"><a href="#粘贴板（Pasteboard）" class="headerlink" title="粘贴板（Pasteboard）"></a>粘贴板（Pasteboard）</h3><p><code>class</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UIPasteboard</a></p>
<p>帮助用户从你的应用里的一个地方到另一个地方，从你的应用到其他应用分享数据的对象。</p>
<p><code>class</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UIPasteConfiguration</a></p>
<p>一个对象实现声明它的能力来接收特定的数据类型用于粘贴和用于拖放活动的接口。</p>
<p><code>protocol</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UIPasteConfigurationSupporting</a></p>
<p>决定一个响应器对象是否支持粘贴配置的接口。</p>
<h3 id="数据管理（Data-Management）"><a href="#数据管理（Data-Management）" class="headerlink" title="数据管理（Data Management）"></a>数据管理（Data Management）</h3><p><code>protocol</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UIDataSourceModelAssociation</a></p>
<p>定义一个接口用于在你的应用里对数据对象提供持久引用的方法集合。</p>
<h3 id="指导访问（Guided-Access）"><a href="#指导访问（Guided-Access）" class="headerlink" title="指导访问（Guided Access）"></a>指导访问（Guided Access）</h3><p><code>protocol</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UIGuidedAccessRestrictionDelegate</a></p>
<p>在 iOS 里你用来为指导访问特性添加自定义限制的方法集合。</p>
<p><code>func</code> <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">UIGuidedAccessRestrictionStateForIdentifier</a>(Striing)</p>
<p>为特定的指导访问限制返回限制状态。</p>
<h2 id="另见（See-Also）"><a href="#另见（See-Also）" class="headerlink" title="另见（See Also）"></a>另见（See Also）</h2><h3 id="应用结构（App-Structure）"><a href="#应用结构（App-Structure）" class="headerlink" title="应用结构（App Structure）"></a>应用结构（App Structure）</h3><h5 id="资源管理（Resource-Management）"><a href="#资源管理（Resource-Management）" class="headerlink" title="资源管理（Resource Management）"></a><a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">资源管理（Resource Management）</a></h5><p>管理你在你的主可执行文件（main executable）外保存的图片，字符串，故事板（storyboards）和 nib 文件。</p>
<h5 id="应用拓展（App-Extensions）"><a href="#应用拓展（App-Extensions）" class="headerlink" title="应用拓展（App Extensions）"></a><a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">应用拓展（App Extensions）</a></h5><p>拓展你的应用的基础功能到系统的其他部分。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/core_app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;管理你的应用的数据模型和它与系统的交互。&lt;/p
    
    </summary>
    
      <category term="Apple文档" scheme="http://yoursite.com/categories/Apple%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="UIKit" scheme="http://yoursite.com/tags/UIKit/"/>
    
  </entry>
  
  <entry>
    <title>The Basics（基础）</title>
    <link href="http://yoursite.com/2017/09/22/2017-09/The-Basics/"/>
    <id>http://yoursite.com/2017/09/22/2017-09/The-Basics/</id>
    <published>2017-09-22T13:27:29.423Z</published>
    <updated>2017-09-25T23:58:39.472Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309" target="_blank" rel="external">原文地址</a></p>
<p>Swift 是一种用于iOS，macOS，watchOS 和 tvOS 应用开发的新语言。尽管如此，Swift 的许多部分会和你使用 C 和 Objective-C 的开发体验面熟。</p>
<p>Swift 为所有基础的 C 和 Objective-C 类型提供了自己的版本，包括对于整型的 <code>Int</code>，对于浮点值的 <code>Double</code> 和 <code>Float</code>，对于布尔值的 <code>Bool</code> 和 对于文本数据的 <code>String</code>。Swift 也提供了三种主要集合类型，<code>Array</code> 、 <code>Set</code> 和 <code>Dictionary</code>，在集合类型（Collection Types）里有描述。</p>
<p>像 C 一样，Swift 使用变量来存储并通过一个标识名来引用值。Swift 也广泛使用值不能改变的变量。也就是大家所熟知的常量，比 C 里面的常量更加强大。在整个 Swift 中，当你使用不需要改变的值的时候，常量被用来让代码更加安全和清晰。</p>
<p>除了熟悉的类型以外，Swift 还介绍了在 Objective-C 里面没有的高级类型，例如元组（tuples）。元组使你能够创建并传递一组值。你可以使用元组作为一个单一的复合值从一个函数返回多个值。</p>
<p>Swift 也介绍了处理值缺失的可选型。可选型表示要么“这里有值，它等于x”，要么“这里根本没有值”。使用可选型类似于在 Objective-C 里对于指针使用 <code>nil</code> ，但是它们适用于任何类型，不仅仅是类。可选型不仅比 Objective-C 里的 nil 指针更安全和更具表达性，而且它们还是 Swift 的许多强大特性的核心。</p>
<p>Swift 是一种类型安全的语言，这意味着语言帮助你让你的代码的值类型清晰。如果你的部分代码需要一个 <code>String</code> ，类型安全阻止你错误地传入一个 <code>Int</code> 。同样地，类型安全阻止你意外地传入一个可选型（optional）<code>String</code> 到需要非可选型（nonoptional）<code>String</code> 的一段代码。类型安全帮助你在开发过程中尽可能早地捕获并解决错误。</p>
<h2 id="常量和变量（Constants-and-Variable）"><a href="#常量和变量（Constants-and-Variable）" class="headerlink" title="常量和变量（Constants and Variable）"></a>常量和变量（Constants and Variable）</h2><p>常量和变量把一个名称（例如 <code>maximumNumberOfLoginAttempts</code> 或 <code>welcomeMessage</code>）和一个特定类型的值（例如数字 <code>10</code> 或字符串 <code>&quot;Hello&quot;</code> ）联系起来。常量的值一旦设置就不能改变，而变量在将来可以被设置不同的值。</p>
<h3 id="声明常量和变量（Declaring-Constants-and-Variables）"><a href="#声明常量和变量（Declaring-Constants-and-Variables）" class="headerlink" title="声明常量和变量（Declaring Constants and Variables）"></a>声明常量和变量（Declaring Constants and Variables）</h3><p>常量和变量在使用前必须先声明。你使用 <code>let</code> 关键字声明常量，<code>var</code> 关键字声明变量。这里有一个常量和变量怎样被用来追踪用户做出的登录尝试次数的例子。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> maximumNumberOfLoginAttempts = <span class="number">10</span></div><div class="line"><span class="keyword">var</span> currentLoginAttempt = <span class="number">0</span></div></pre></td></tr></table></figure>
<p>这段代码可以被理解为：</p>
<p>“声明一个叫做 <code>maximumNumberOfLoginAttempts</code> 的常量，并赋值10。然后，声明一个叫做 <code>currentLoginAttempt</code> 的变量，并赋初始值0。”</p>
<p>在这个例子里，允许登录尝试的最大次数被声明为一个常量，因为最大次数从不改变。当前登录尝试计数器被声明为一个变量，因为这个值在每次登录尝试失败后必须被增加。</p>
<p>你可以在单行里声明多个常量或多个变量，由逗号分隔。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span>, z = <span class="number">0.0</span></div></pre></td></tr></table></figure>
<blockquote>
<h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>如果在你的代码里一个存储值不会改变，总是使用 <code>let</code> 关键字声明它为常量。只对于需要能够被改变的存储值使用变量。</p>
</blockquote>
<h3 id="类型注解（Type-Annotation）"><a href="#类型注解（Type-Annotation）" class="headerlink" title="类型注解（Type Annotation）"></a>类型注解（Type Annotation）</h3><p>当你声明一个常量或变量的时候，你可以提供一个类型注解（type annotation），使常量和变量能存储的值的种类变得清晰。通过在常量或变量名后放置一个分号，跟着一个空格，跟着要使用的类型名来写类型注解。</p>
<p>这个例子为一个叫做 <code>welcomeMessage</code> 的变量提供一个类型注解，表示这个变量能存储 <code>String</code> 值：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> welcomeMessage: <span class="type">String</span></div></pre></td></tr></table></figure>
<p>这个声明里的分号意思是“…类型的…”，所以上面的代码可理解为：</p>
<p>“声明一个叫做 <code>welcomeMessage</code> 叫做 <code>String</code> 类型的变量。”</p>
<p>短语“ <code>String</code> 类型的（of type <code>String</code>）”意思是“能存储任何 <code>String</code> 值。”把它看做意思是能被存储的“东西的类型”（或“东西的种类”）。</p>
<p><code>welcomeMessage</code> 变量现在能被设置为任何字符串而不会报错。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">welcomeMessage = <span class="string">"Hello"</span></div></pre></td></tr></table></figure>
<p>你可以在一行上定义相同类型的多个相关的变量，由逗号分隔，在最后的变量名后加上一个类型注解。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> red, green, blue: <span class="type">Double</span></div></pre></td></tr></table></figure>
<blockquote>
<h6 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h6><p>在实践中你很少需要写类型注解。如果你为常量或变量在定义时提供一个初始值，Swift 几乎总是能推断出常量或变量要使用的类型，在<a href="">类型安全和类型推导（Type Safety and Type Inference）</a>里有描述。在上面的 <code>welcomeMessage</code> 例子里，没有提供初始值，所以 <code>welcomeMessage</code> 变量的类型使用类型注解指定而不是从初始值推断。</p>
</blockquote>
<h3 id="命名常量和变量（Naming-Constants-and-Variables）"><a href="#命名常量和变量（Naming-Constants-and-Variables）" class="headerlink" title="命名常量和变量（Naming Constants and Variables）"></a>命名常量和变量（Naming Constants and Variables）</h3><p>常量和变量名能包含几乎任何字符，包括 Unicode 字符：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> π = <span class="number">3.14159</span></div><div class="line"><span class="keyword">let</span> 你好 = <span class="string">"你好世界"</span></div><div class="line"><span class="keyword">let</span> 🐶🐮 = <span class="string">"dogcow"</span></div></pre></td></tr></table></figure>
<p>常量和变量名不能包含空格字符，数学符号，箭头，私有（或无效）Unicode 代码点，或线条和边框字符。它们也不能以数字开头，尽管数字能被包含在名字和其他地方。</p>
<p>一旦你已经声明了一个确定类型的常量或者变量，你不能用同样的名字再次声明它，或者把它变为不同类型的存储值。你也不能把常量改为变量或把变量改为常量。</p>
<blockquote>
<h6 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h6><p>如果你需要给一个常量或变量和 Swift 保留关键字相同的名字，当作为一个名字使用时，用反引号包裹关键字。不管怎样，避免使用关键字作为变量名，除非你完全没有其他选择。</p>
</blockquote>
<p>你可以改变一个已经存在的变量的值到一个兼容类型的值。在这个例子里，<code>friendlyWelcome</code> 的值被从 <code>&quot;Hello!&quot;</code> 改变为 <code>&quot;Bonjour!&quot;</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> friendlyWelcome = <span class="string">"Hello!"</span></div><div class="line">friendlyWelcome = <span class="string">"Bonjour!"</span></div><div class="line"><span class="comment">// friendlyWelcome is now "Bonjour!"</span></div></pre></td></tr></table></figure>
<p>不像变量一样，常量的值在它设置后不能代表。尝试这样做的话，当你的代码被编译时会作为一个错误报告出来。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> languageName = <span class="string">"Swift"</span></div><div class="line">languageName = <span class="string">"Swift++"</span></div><div class="line"><span class="comment">// This is a compile-time error: languageName cannot be changed.</span></div></pre></td></tr></table></figure>
<h3 id="打印常量和变量（Printing-Constants-and-Variables）"><a href="#打印常量和变量（Printing-Constants-and-Variables）" class="headerlink" title="打印常量和变量（Printing Constants and Variables）"></a>打印常量和变量（Printing Constants and Variables）</h3><p>你可以用 <code>print(_:separator:terminator:)</code> 函数打印当前常量或变量的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(friendlyWelcome)</div><div class="line"><span class="comment">// Prints "Bonjour!"</span></div></pre></td></tr></table></figure>
<p><code>print(_:separator:terminator:)</code> 函数是一个打印一个或多个值到多个合适的输出的全局函数。在 Xcode 里，例如，<code>print(_:separator:terminator:)</code> 函数在 Xcode 的”控制台“面板打印它的输出。<code>separator</code> 和 <code>terminator</code> 参数有默认值，所以当你调用这个函数时，你可以忽略它们。默认情况下，这个函数通过添加一个换行符来终止它打印的这行。要打印一个在它后面没有换行符的值，传入一个空的字符串作为终止符，例如，<code>print(someValue, terminator: &quot;&quot;)</code>。对于关于带有默认值参数的信息，查看默认参数值（Default Parameter Values）。</p>
<h2 id="注释（Comments）"><a href="#注释（Comments）" class="headerlink" title="注释（Comments）"></a>注释（Comments）</h2><h2 id="分号（Semicolons）"><a href="#分号（Semicolons）" class="headerlink" title="分号（Semicolons）"></a>分号（Semicolons）</h2><h2 id="整型（Integers）"><a href="#整型（Integers）" class="headerlink" title="整型（Integers）"></a>整型（Integers）</h2><h3 id="整型边界（Integer-）"><a href="#整型边界（Integer-）" class="headerlink" title="整型边界（Integer ）"></a>整型边界（Integer ）</h3><h3 id="Int"><a href="#Int" class="headerlink" title="Int"></a>Int</h3><h3 id="UInt"><a href="#UInt" class="headerlink" title="UInt"></a>UInt</h3><h2 id="浮点值（Floating-Point-Numbers）"><a href="#浮点值（Floating-Point-Numbers）" class="headerlink" title="浮点值（Floating-Point Numbers）"></a>浮点值（Floating-Point Numbers）</h2><h2 id="类型安全和类型引用（Type-Safety-and-Type-Inference）"><a href="#类型安全和类型引用（Type-Safety-and-Type-Inference）" class="headerlink" title="类型安全和类型引用（Type Safety and Type Inference）"></a>类型安全和类型引用（Type Safety and Type Inference）</h2><h2 id="数值字面量（Numeric-Literals）"><a href="#数值字面量（Numeric-Literals）" class="headerlink" title="数值字面量（Numeric Literals）"></a>数值字面量（Numeric Literals）</h2><h2 id="数值类型转换（Numeric-Type-Conversion）"><a href="#数值类型转换（Numeric-Type-Conversion）" class="headerlink" title="数值类型转换（Numeric Type Conversion）"></a>数值类型转换（Numeric Type Conversion）</h2><h3 id="整型转换（Integer-Conversion）"><a href="#整型转换（Integer-Conversion）" class="headerlink" title="整型转换（Integer Conversion）"></a>整型转换（Integer Conversion）</h3><h3 id="整型和浮点型转换（Integer-and-Floating-Point-Conversion）"><a href="#整型和浮点型转换（Integer-and-Floating-Point-Conversion）" class="headerlink" title="整型和浮点型转换（Integer and Floating-Point Conversion）"></a>整型和浮点型转换（Integer and Floating-Point Conversion）</h3><h2 id="类型别名（Type-Aliases）"><a href="#类型别名（Type-Aliases）" class="headerlink" title="类型别名（Type Aliases）"></a>类型别名（Type Aliases）</h2><h2 id="布尔型（Booleans）"><a href="#布尔型（Booleans）" class="headerlink" title="布尔型（Booleans）"></a>布尔型（Booleans）</h2><h2 id="元组（Tuples）"><a href="#元组（Tuples）" class="headerlink" title="元组（Tuples）"></a>元组（Tuples）</h2><h2 id="可选型（Optionals）"><a href="#可选型（Optionals）" class="headerlink" title="可选型（Optionals）"></a>可选型（Optionals）</h2><h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><h2 id="If-语句和强制解包（If-Statements-and-Forced-Unwrapping）"><a href="#If-语句和强制解包（If-Statements-and-Forced-Unwrapping）" class="headerlink" title="If 语句和强制解包（If Statements and Forced Unwrapping）"></a>If 语句和强制解包（If Statements and Forced Unwrapping）</h2><h2 id="可选绑定（Optional-Binding）"><a href="#可选绑定（Optional-Binding）" class="headerlink" title="可选绑定（Optional Binding）"></a>可选绑定（Optional Binding）</h2><h2 id="隐式可选型解包（Implicitly-Unwrapped-Optional）"><a href="#隐式可选型解包（Implicitly-Unwrapped-Optional）" class="headerlink" title="隐式可选型解包（Implicitly Unwrapped Optional）"></a>隐式可选型解包（Implicitly Unwrapped Optional）</h2><h2 id="错误处理（Error-Handling）"><a href="#错误处理（Error-Handling）" class="headerlink" title="错误处理（Error Handling）"></a>错误处理（Error Handling）</h2><h2 id="断言和前提条件（Assertions-and-Preconditions）"><a href="#断言和前提条件（Assertions-and-Preconditions）" class="headerlink" title="断言和前提条件（Assertions and Preconditions）"></a>断言和前提条件（Assertions and Preconditions）</h2><h2 id="使用断言调试（Debugging-with-Assertions）"><a href="#使用断言调试（Debugging-with-Assertions）" class="headerlink" title="使用断言调试（Debugging with Assertions）"></a>使用断言调试（Debugging with Assertions）</h2><h2 id="强制前提条件（Enforcing-Preconditions）"><a href="#强制前提条件（Enforcing-Preconditions）" class="headerlink" title="强制前提条件（Enforcing Preconditions）"></a>强制前提条件（Enforcing Preconditions）</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref
    
    </summary>
    
      <category term="Swift" scheme="http://yoursite.com/categories/Swift/"/>
    
    
      <category term="swift programming guide" scheme="http://yoursite.com/tags/swift-programming-guide/"/>
    
  </entry>
  
  <entry>
    <title>UIKit</title>
    <link href="http://yoursite.com/2017/09/22/2017-09/UIkit/"/>
    <id>http://yoursite.com/2017/09/22/2017-09/UIkit/</id>
    <published>2017-09-22T13:27:11.102Z</published>
    <updated>2017-09-24T23:32:56.563Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="external">原文地址</a></p>
<p>为你的 iOS 或 tvOS 应用构建并管理一个图形的、事件驱动的用户界面。</p>
<h2 id="概览（Overview）"><a href="#概览（Overview）" class="headerlink" title="概览（Overview）"></a>概览（Overview）</h2><p>UIKit 框架为你的 iOS 和 tvOS 应用提供必需的基础实施。它提供了实现你的界面的窗口（window）和视图（view）基础设施，传递多点触控（Multitouch）和其他输入类型到你应用的事件处理基础设施和需要在用户之间管理交互的主运行循环（main run loop）。由框架提供的其他功能包括动画支持，文档支持，绘制和输出支持，关于当前设备信息，文本管理和显示，搜索支持，无障碍功能支持，应用拓展支持和资源管理。</p>
<blockquote>
<h5 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h5><p>除非另外说明，只在你的应用的主线程（main thread）或主调度队列（main dispatch queue）使用 UIKit 类。这个限制特别应用于起源自 UIResponder 或涉及以任何方式操作你的应用的用户界面的类。</p>
</blockquote>
<h2 id="主题（Topics）"><a href="#主题（Topics）" class="headerlink" title="主题（Topics）"></a>主题（Topics）</h2><h3 id="应用结构（App-Structure）"><a href="#应用结构（App-Structure）" class="headerlink" title="应用结构（App Structure）"></a>应用结构（App Structure）</h3><p>UIKit 管理你的应用和系统的交互并为你提供类来管理你的应用的数据和资源。</p>
<h5 id="核心应用（Core-App）"><a href="#核心应用（Core-App）" class="headerlink" title="核心应用（Core App）"></a><a href="/2017/09/24/2017-09/Core-App/">核心应用（Core App）</a></h5><p>管理你的应用的数据模型以及他和系统的交互。</p>
<h5 id="资源管理（Resource-Management）"><a href="#资源管理（Resource-Management）" class="headerlink" title="资源管理（Resource Management）"></a><a href="">资源管理（Resource Management）</a></h5><p>管理你在你的主要的可执行文件外存储的图片、字符串、storyboards 和 nib 文件。</p>
<h5 id="应用拓展（App-Extensions）"><a href="#应用拓展（App-Extensions）" class="headerlink" title="应用拓展（App Extensions）"></a><a href="">应用拓展（App Extensions）</a></h5><p>拓展你的应用的基础功能到系统的其他部分。</p>
<h3 id="用户界面（User-Interface）"><a href="#用户界面（User-Interface）" class="headerlink" title="用户界面（User Interface）"></a>用户界面（User Interface）</h3><p>视图（Views）帮助你在屏幕上显示内容和促进用户交互；视图控制器（view controllers）帮助你管理视图（views）和界面结构。</p>
<h5 id="视图和控件（Views-and-Controls）"><a href="#视图和控件（Views-and-Controls）" class="headerlink" title="视图和控件（Views and Controls）"></a><a href="">视图和控件（Views and Controls）</a></h5><p>在屏幕上呈现内容和定义该内容所允许的交互。</p>
<h5 id="视图管理（View-Management）"><a href="#视图管理（View-Management）" class="headerlink" title="视图管理（View Management）"></a><a href="">视图管理（View Management）</a></h5><p>使用视图控制器管理你的界面和促进在不同内容的屏幕之间的导航。</p>
<h5 id="系统视图控制器（System-View-Controller）"><a href="#系统视图控制器（System-View-Controller）" class="headerlink" title="系统视图控制器（System View Controller）"></a><a href="">系统视图控制器（System View Controller）</a></h5><p>使用内置的 UIKit 视图控制器来选择图片，编辑视频，分享内容，打印文件等。</p>
<h5 id="拖放（Drag-and-Drop）"><a href="#拖放（Drag-and-Drop）" class="headerlink" title="拖放（Drag and Drop）"></a><a href="">拖放（Drag and Drop）</a></h5><p>通过与你的视图（views）一起使用交互 API 把拖放功能带到你的应用。</p>
<h5 id="无障碍（Accessibility）"><a href="#无障碍（Accessibility）" class="headerlink" title="无障碍（Accessibility）"></a><a href="">无障碍（Accessibility）</a></h5><p>使你的应用对于残疾用户更友好。</p>
<h5 id="动画与触觉（Animation-and-Haptics）"><a href="#动画与触觉（Animation-and-Haptics）" class="headerlink" title="动画与触觉（Animation and Haptics）"></a><a href="">动画与触觉（Animation and Haptics）</a></h5><p>使用基于视图的动画和触觉向用户提供反馈。</p>
<h5 id="窗口与屏幕（Windows-and-Screens）"><a href="#窗口与屏幕（Windows-and-Screens）" class="headerlink" title="窗口与屏幕（Windows and Screens）"></a><a href="">窗口与屏幕（Windows and Screens）</a></h5><p>为你的视图层级和其他内容提供一个容器。</p>
<h3 id="事件处理（Event-Handling）"><a href="#事件处理（Event-Handling）" class="headerlink" title="事件处理（Event Handling）"></a>事件处理（Event Handling）</h3><p>响应器和手势识别器帮助你处理多点触控，按钮点击，3D Touch事件，键盘输入，自定义输入和自定义动作。</p>
<h5 id="理解事件处理，响应器和响应器链（Understanding-Event-Handling，-Responders，and-the-Responder-Chain）"><a href="#理解事件处理，响应器和响应器链（Understanding-Event-Handling，-Responders，and-the-Responder-Chain）" class="headerlink" title="理解事件处理，响应器和响应器链（Understanding Event Handling， Responders，and the Responder Chain）"></a><a href="">理解事件处理，响应器和响应器链（Understanding Event Handling， Responders，and the Responder Chain）</a></h5><p>学习事件是如何被传送到你的应用和你如何处理它们。</p>
<h5 id="触摸，按压和手势（Touches，Presses，and-Gestures）"><a href="#触摸，按压和手势（Touches，Presses，and-Gestures）" class="headerlink" title="触摸，按压和手势（Touches，Presses，and Gestures）"></a><a href="">触摸，按压和手势（Touches，Presses，and Gestures）</a></h5><p>在手势识别器里封装你的应用的事件处理逻辑，以便你能在整个应用里重用这部分代码。</p>
<h5 id="Peek-and-Pop"><a href="#Peek-and-Pop" class="headerlink" title="Peek and Pop"></a><a href="">Peek and Pop</a></h5><p>使用 3D Touch 输入为你的内容显示自定义预览和动作。</p>
<h5 id="键盘和菜单（Keyboard-and-Menus）"><a href="#键盘和菜单（Keyboard-and-Menus）" class="headerlink" title="键盘和菜单（Keyboard and Menus）"></a><a href="">键盘和菜单（Keyboard and Menus）</a></h5><p>处理键盘输入并显示一个自定义动作菜单。</p>
<h3 id="图形，绘制和输出（Graphics，Drawing，and-Printing）"><a href="#图形，绘制和输出（Graphics，Drawing，and-Printing）" class="headerlink" title="图形，绘制和输出（Graphics，Drawing，and Printing）"></a>图形，绘制和输出（Graphics，Drawing，and Printing）</h3><p>UIKit 提供类和协议帮助你配置你的绘制环境和渲染内容。</p>
<h5 id="图片和-PDF（Images-and-PDF）"><a href="#图片和-PDF（Images-and-PDF）" class="headerlink" title="图片和 PDF（Images and PDF）"></a><a href="">图片和 PDF（Images and PDF）</a></h5><p>创建并管理图片，包括哪些使用位图（bitmap）和 PDF 格式的图片。</p>
<h5 id="绘制（Drawing）"><a href="#绘制（Drawing）" class="headerlink" title="绘制（Drawing）"></a><a href="">绘制（Drawing）</a></h5><p>使用渲染器，绘制路径，线，阴影来配置你的应用的绘制环境。</p>
<h5 id="打印（Printing）"><a href="#打印（Printing）" class="headerlink" title="打印（Printing）"></a><a href="">打印（Printing）</a></h5><p>显示系统打印面板和管理过程。</p>
<h3 id="文本（Text）"><a href="#文本（Text）" class="headerlink" title="文本（Text）"></a>文本（Text）</h3><p>除了在你的应用里易于显示文本的文本视图（text views）外，UIKit 提供了支持系统键盘的自定义文本管理和渲染。</p>
<h5 id="文本显示和字体（Text-Display-and-Fonts）"><a href="#文本显示和字体（Text-Display-and-Fonts）" class="headerlink" title="文本显示和字体（Text Display and Fonts）"></a><a href="">文本显示和字体（Text Display and Fonts）</a></h5><p>使用 UIKit 视图显示文本，管理字体和检查拼写。</p>
<h5 id="文本存储（Text-Storage）"><a href="#文本存储（Text-Storage）" class="headerlink" title="文本存储（Text Storage）"></a><a href="">文本存储（Text Storage）</a></h5><p>管理文本存储和协调文本的布局。</p>
<h5 id="键盘和输入（Keyboards-and-Input）"><a href="#键盘和输入（Keyboards-and-Input）" class="headerlink" title="键盘和输入（Keyboards and Input）"></a><a href="">键盘和输入（Keyboards and Input）</a></h5><p>配置系统键盘或创建你自己的键盘并自己处理输入。</p>
<h3 id="弃用（Deprecated）"><a href="#弃用（Deprecated）" class="headerlink" title="弃用（Deprecated）"></a>弃用（Deprecated）</h3><p>避免在你的应用里使用弃用的类和协议。</p>
<h5 id="弃用的符号（Deprecated-Symbols）"><a href="#弃用的符号（Deprecated-Symbols）" class="headerlink" title="弃用的符号（Deprecated Symbols）"></a><a href="">弃用的符号（Deprecated Symbols）</a></h5><h3 id="结构体（Structures）"><a href="#结构体（Structures）" class="headerlink" title="结构体（Structures）"></a>结构体（Structures）</h3><p><code>struct</code>  <a href="">UIDocumentBrowserError</a></p>
<p>一个包含关于文档浏览错误信息的结构体。</p>
<h3 id="类（Classes）"><a href="#类（Classes）" class="headerlink" title="类（Classes）"></a>类（Classes）</h3><p><code>class</code>  <a href="">UICollectionViewDropPlaceholder</a></p>
<p><code>class</code> <a href="">UICollectionViewPlaceholder</a></p>
<p><code>class</code> <a href="">UITableViewDropPlaceholder</a></p>
<p><code>class</code> <a href="">UITableViewPlaceholder</a></p>
<h3 id="协议（Protocols）"><a href="#协议（Protocols）" class="headerlink" title="协议（Protocols）"></a>协议（Protocols）</h3><p><code>protocol</code> <a href="">UIItemProviderPresentationSizeProviding</a></p>
<h3 id="参考（Reference）"><a href="#参考（Reference）" class="headerlink" title="参考（Reference）"></a>参考（Reference）</h3><h5 id="UIKit-Enumerations"><a href="#UIKit-Enumerations" class="headerlink" title="UIKit Enumerations"></a><a href="">UIKit Enumerations</a></h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为你的 iOS 或 tvOS 应用构建并管理一个图形的、事件驱动
    
    </summary>
    
      <category term="Apple文档" scheme="http://yoursite.com/categories/Apple%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="apple docs" scheme="http://yoursite.com/tags/apple-docs/"/>
    
  </entry>
  
</feed>
